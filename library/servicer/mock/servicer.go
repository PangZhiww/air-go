// Code generated by MockGen. DO NOT EDIT.
// Source: ./servicer.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	servicer "github.com/air-go/rpc/library/servicer"
	gomock "github.com/golang/mock/gomock"
)

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServicer) All(ctx context.Context) ([]servicer.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]servicer.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServicerMockRecorder) All(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServicer)(nil).All), ctx)
}

// Done mocks base method.
func (m *MockServicer) Done(ctx context.Context, node servicer.Node, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done", ctx, node, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockServicerMockRecorder) Done(ctx, node, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockServicer)(nil).Done), ctx, node, err)
}

// GetCaCrt mocks base method.
func (m *MockServicer) GetCaCrt() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCaCrt")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCaCrt indicates an expected call of GetCaCrt.
func (mr *MockServicerMockRecorder) GetCaCrt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCaCrt", reflect.TypeOf((*MockServicer)(nil).GetCaCrt))
}

// GetClientKey mocks base method.
func (m *MockServicer) GetClientKey() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientKey")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetClientKey indicates an expected call of GetClientKey.
func (mr *MockServicerMockRecorder) GetClientKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientKey", reflect.TypeOf((*MockServicer)(nil).GetClientKey))
}

// GetClientPem mocks base method.
func (m *MockServicer) GetClientPem() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientPem")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetClientPem indicates an expected call of GetClientPem.
func (mr *MockServicerMockRecorder) GetClientPem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientPem", reflect.TypeOf((*MockServicer)(nil).GetClientPem))
}

// Name mocks base method.
func (m *MockServicer) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockServicerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockServicer)(nil).Name))
}

// Pick mocks base method.
func (m *MockServicer) Pick(ctx context.Context) (servicer.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pick", ctx)
	ret0, _ := ret[0].(servicer.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pick indicates an expected call of Pick.
func (mr *MockServicerMockRecorder) Pick(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pick", reflect.TypeOf((*MockServicer)(nil).Pick), ctx)
}

// RegistryName mocks base method.
func (m *MockServicer) RegistryName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistryName")
	ret0, _ := ret[0].(string)
	return ret0
}

// RegistryName indicates an expected call of RegistryName.
func (mr *MockServicerMockRecorder) RegistryName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryName", reflect.TypeOf((*MockServicer)(nil).RegistryName))
}
